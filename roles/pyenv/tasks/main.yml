---
# tasks file for pyenv
- user:
    name: '{{ user }}'
    state: present
  register: user_registered

- name: Check if pyenv exists
  ansible.builtin.stat:
    path: '{{ user_registered.home }}/.pyenv'
  register: pyenv_exists

- name: Run the equivalent of "apt-get update" as a separate step
  when: pyenv_exists.stat.exists == False and ansible_os_family != "Darwin"
  ansible.builtin.apt:
    update_cache: yes

- name: Install pyenv requirements
  when: pyenv_exists.stat.exists == False and ansible_os_family != "Darwin"
  apt: 
    state: present
    name: git,make,build-essential,libssl-dev,zlib1g-dev,libbz2-dev,libreadline-dev,libsqlite3-dev,wget,curl,llvm,libncursesw5-dev,xz-utils,tk-dev,libxml2-dev,libxmlsec1-dev,libffi-dev,liblzma-dev,python3-dev,python3-venv,python3-pip

- name: Install pyenv linux
  become: true
  become_user: '{{ user }}'
  become_method: su
  shell: curl https://pyenv.run | bash
  when: pyenv_exists.stat.exists == False and ansible_os_family != "Darwin"

- name: Install pyenv macos
  become: true
  become_user: '{{ user }}'
  community.general.homebrew:
    name: pyenv
    state: present
  when: pyenv_exists.stat.exists == False and ansible_os_family == "Darwin"

- name: check is pipx installed
  shell: command -v pipx
  register: pipx_exists
  ignore_errors: true

- name: pipx linux
  when: pipx_exists is failed
  ansible.builtin.pip:
    name: pipx

- name: check is poetry installed
  shell: command -v poetry
  register: poetry_exists
  ignore_errors: true

- name: Install poetry on pipx
  when: poetry_exists is failed
  become_user: '{{ user }}'
  community.general.pipx:
    name: poetry

- name: check is ansible installed
  shell: command -v ansible-playbook
  register: ansible_exists
  ignore_errors: true

- name: Install ansible-base
  when: ansible_exists is failed
  become_user: '{{ user }}'
  community.general.pipx:
    name: ansible-base

- name: inject ansible into pipx ansible-base
  when: ansible_exists is failed
  become_user: '{{ user }}'
  community.general.pipx:
    name: ansible-base
    state: inject
    inject_packages:
      - ansible

- name: check is commitizen installed
  shell: command -v cz
  register: commitizen_exists
  ignore_errors: true

- name: Install commitizen
  when: commitizen_exists is failed
  become_user: '{{ user }}'
  community.general.pipx:
    name: commitizen

- name: inject emoji into pipx commitizen
  when: commitizen_exists is failed
  become_user: '{{ user }}'
  community.general.pipx:
    name: commitizen
    state: inject
    inject_packages:
      - commitizen-emoji

